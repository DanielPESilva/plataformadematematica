const express = require('express');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();
const app = express();
app.use(express.json());


app.post('/modulo', async (req, res) => {
    try {
        const { tema, descricao, pdf, linkVideo } = req.body;
        const modulo = await prisma.modulo.create({
            data: {
                tema,
                descricao,
                pdf,
                linkVideo,
            },
        });
        res.status(201).json(modulo);
    } catch (error) {
        console.error('Erro ao criar módulo:', error);
        res.status(500).json({ error: 'Erro ao criar módulo' });
    }
});


app.get('/modulo/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const modulo = await prisma.modulo.findUnique({
            where: {
                id: parseInt(id),
            },
        });
        if (!modulo) {
            return res.status(404).json({ error: 'Módulo não encontrado' });
        }
        res.json(modulo);
    } catch (error) {
        console.error('Erro ao obter módulo:', error);
        res.status(500).json({ error: 'Erro ao obter módulo' });
    }
});


app.put('/modulo/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const { tema, descricao, pdf, linkVideo } = req.body;
        const modulo = await prisma.modulo.update({
            where: {
                id: parseInt(id),
            },
            data: {
                tema,
                descricao,
                pdf,
                linkVideo,
            },
        });
        res.json(modulo);
    } catch (error) {
        console.error('Erro ao atualizar módulo:', error);
        res.status(500).json({ error: 'Erro ao atualizar módulo' });
    }
});


app.delete('/modulo/:id', async (req, res) => {
    try {
        const { id } = req.params;
        await prisma.modulo.delete({
            where: {
                id: parseInt(id),
            },
        });
        res.json({ message: 'Módulo excluído com sucesso' });
    } catch (error) {
        console.error('Erro ao excluir módulo:', error);
        res.status(500).json({ error: 'Erro ao excluir módulo' });
    }
});


const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log('Servidor rodando na porta ${PORT}');
});